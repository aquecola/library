 #doc

 #windows

ssh-server:

dism /Online /Add-Capability /CapabilityName:OpenSSH.Server~~~~0.0.1.0 - install ssh-server

ssh-add "C:\Users\user\.ssh\id_ed25519" - add rsa key

C:\Programdata\ssh\sshd_config - main ssh config
DenyGroups Users
AllowGroups Administrators

| DenyUsers AllowUsers |

Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::Security>
Run choco install -y nano - install nano-win for Windows

https://ftp.nluug.nl/pub/vim/pc/gvim82.exe - download vim installer for windows

https://winitpro.ru/index.php/2015/09/02/neskolko-rdp-sessij-v-windows-10/ - how to create windows 10 into terminal server

how to add user through cmd/powershell:

net user "user_name" "password" /add
net localgroup Administrators admin /add

cmd help:

dir - show all files in current directory
type - show
rd - delete directory
del - delete file
systeminfo
tasklist


 #linux

fdisk -l  #show all mounted disks
lsblk
 
ls -a
df -h  #check memory disc
df -i - check inodes
du - check memory directory
mount
LA(load average) == amount of cores - OK
dig - DNS lookup and display server answer
dhclient  -r - get new ip from DHCP
cat /var/log/boot.log - bootlog info
stat -c "%a %n" go - show permission numeric

usefull tools and commands:

pstree - show all demons
sudo service restart
sudo systemctl restart
free -m - check free ram
htop - nice tool for monitoring sys, like 'windows' task manager
uname -a - show linux version
wget https://git.io/vpn -O openvpn-install.sh - the fastest way for install openVPN-server through the script

&> /dev/null &

/etc/environment, /etc/profile - $PATH file

how to use ssh key: (v2)

ssh-keygen - generate ssh key
ssh-copy-id *server* - copy your ssh id on server
cat ~/.ssh/id_rsa.pub | ssh имя_пользователя@адрес_сервера "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod go= ~/.ssh/authorized_keys" - manual add key

how to generate ssh key: 

ssh-keygen -t ed25519 -C "your_email@example.com"
eval "$(ssh-agent -s)" - show existing ssh keys
ssh-add ~/.ssh/id_ed25519 - add ssh private key to the ssh-agent

all about repositories:

apt-cache policy | grep http | awk '{print $2 $3}' | sort -u - show all ppa repositories
sudo add-apt-repository $$ ppa: $$ - add repository
/etc/apt/sources.list - all installed repositories

 #yum

yum repolist all - list of enabled and disabled yum repositories
yum clean all - clear cache

firewall allow port:

sudo ufw enable
sudo ufw allow 1716:1764/tcp
sudo ufw allow 1716:1764/udp

 #linux_and_apps_problems

Failed to start LSB: VirtualBox Linux kernel module
solution:
disable secure boot in bios

 #git

Конфигурация находится в директории "Home" на Linux, называется .gitconfig
git init - добавить репозиторий
git status - проверить состояние репозитория
git add -A - добавить трекер на всю директорию

git commit -m 'Add some code'
git commit --amend - поменять текст последнего коммита

git remote add origin "ссылка на репозиторий" - подключение к удалённому репозиторию

git push origin master - отправка локальных изменений на сервер
git fetch - вытаскивание данных с сервера на локальный клиент
git pull - как я понял, делает тоже самое, что и fetch

git branch - создание новой ветки/просмотр веток
git branch -d - удаление ветки
git checkout - переключение на другую ветку
git merge 'название ветки' - объединение действующей с другой веткой

git config pull.rebase false  # merge (the default strategy)
git config pull.rebase true   # rebase
git config pull.ff only       # fast-forward only 

git config --edit
git config --global --edit

git submodule add git@github.com:aquecola/docker_prometheus_stack.git Docker/docker_prometheus_stack # create submodule


 #---#

 #SDLC

Этапы:

* Анализ требований ("Какие проблемы требуют решений?")
* Планирование ("Что мы хотим сделать?")
* Проектирование и дизайн ("Как мы добьёмся наших целей?")
* Разработка ПО (Непосредственное регулирование процессом создания продукта)
* Тестирование (Обеспечение качественной работы продукта)
* Развёртывание (Регулирование использование релизного продукта)
* Обслуживание (Мониторинг и допил продукта, выпуск обновлений)

Цели:

* Сокращение времени вывода продукта на рынок
* Обеспечение более качественной производительности
* Экономие бюджета и повышение пользы продукт


 #python

a = int(input()) - приглашение на ввод переменной
module pyinstaller
pyinstaller -F test.py - перекомпелировать программу в .exe
friends = ['Сергей', 'Соня', 'Дима', 'Алина', 'Егор'] - massives

 #bash

test command:

$? - the last resault of last command or code
[foo = bar]
echo $? | 0 - true, 1 - false
[] equal test command

(( )) - is used to do arithmetic calculations
example

for (( i=0; i>50; i++ )); do

if statement: 

if [<some test>] #if true
then
  <some commands>
fi


 #powershell

Set-Service -Name sshd -StartupType 'Automatic'

 #docker 

installation:

apt install docker docker.io


commom commands:

docker pull - download image
docker images - cheking existing images 
docker run - start container
docker ps - show all working containers rn
docker ps -a - show all containers when started in a past
docker rm - delete container
docker ps -a -f status=exited

docker run -it busybox sh - starting shell of current container 
docker run -d -P --name static-site prakhar1989/static-site - starting web site where -d - detached mode, -P - makes open ports public
docker run -p 8888:80 'name' - run image on port 8888:80

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg


 #docker-compose:

install:

COMVER=2.14.2
curl -L "https://github.com/docker/compose/releases/download/v$COMVER/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
chmod +x /usr/bin/docker-compose
docker-compose --version

--

docker-compose up -d - up all containers

 #docker-swarm

docker swarm init --advertise-addr # ip
docker swarm join-token manager
docker swarm join-token worker
docker swarm join --token
docker node ls
docker swarm leave


 #kubernetes

minikube:

minikube start
minikube stop
kubectl get nodes
kubectl get pods --all-namespaces

 #jenkins

installation:

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
sudo ufw allow 8080 - to open the port
sudo ufw allow OpenSSH
sudo ufw enable - to enable firewall if it is innactive
sudo ufw status

how to change HTTP port:

vim /etc/default/jenkins (for Debian/Ubuntu)
vim /etc/sysconfig/jenkins (for CentOS)

 #nginx

sudo nginx -t - check configuration files

 #vagrant

vagrant init *author/box - add vagrant configuration and create new evironment, discover vagrant boxes here - https://app.vagrantup.com/boxes/search
vagrant up - start virtual machine
vagrant halt - stop virtual machine
vagrant ssh - connects to machine via ssh
vagrant ssh-config - outputs OpenSSH valid configuration to connect to machine

config example for vagrant virtual machine:

Vagrant.configure(2) do |config|
config.vm.box = "bento/ubuntu-18.04"
config.vm.box_check_update = false
config.vm.provider "virtualbox" do |vb|
vb.name = "ubuntu-1804-test"
vb.memory = 2048
vb.cpus = 1
  end
  
config.vm.hostname = "ubuntu-1804-test"
config.vm.network "public_network"
config.ssh.username = "vagrant"
config.ssh.password = "vagrant"

end
!!!

 #nmcli

nmcli con add type tun/eth/etc ifname *interface*
nmcli con mod *name* ipv4.address 0.0.0.0/0
nmcli con mod *name* ipv4.method manual/auto (no dhcp, dhcp)
nmcli con mod *name* ipv4.routes 0.0.0.0/0 (dst)

 #nmap

nmap -sP 192.168.3.0/24 - describe and show all available hosts in network
nmap -sT 192.168.3.2 - show all open ports

 #ufw

ufw allow 1716:1764/tcp
ufw allow 1716:1764/udp - open port
vim /etc/default/ufw - config for ufw
ufw allow from 79.137.196.193 to any port 22
ufw allow from 176.53.193.30 to any port 22
ufw allow in on eth0 to any port 80
ufw status numbered

 #firewalld (CentOS/Fedor)

firewall-cmd --permanent --zone=public --add-port=22/tcp
firewall-cmd --list-all
firewall-cmd --zone=public --add-source 0.0.0.0 --permanent
firewall-cmd --zone=public --add-forward-port=port=2223:proto=tcp:toport=22 - port forwarding
firewall-cmd --zone=public --add-masquerade
firewall-cmd --zone=publiс --add-forward-port=port=2223:proto=tcp:toport=22:toaddr=192.168.56.4 - port forwarding to another machine 

 #iptables

yum install iptables-services

basic iptables configuration:



iptables -nvL --line-numbers - show all rules
iptables -A INPUT -p tcp --dport=22 -d *dest ip address* -j ACCEPT
iptables -I INPUT -p tcp -m state --state NEW -s *source address* --dport=22 -j ACCEPT
iptables -t filter -D INPUT 6 - delete rule in filter
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -P INPUT DROP

service iptables save - #save rules


 #nf_tables

iptables-translate #


nft list table ip filter 
nft flush ruleset
nft add table ip filter 
nft 'add chain ip filter input { type filter hook input priority 0 ; }'
nft add rule ip filter input tcp dport 22 counter accept
nft add rule ip filter input tcp dport {80, 443} counter accept
nft add rule ip filter input ct state related, established counter accept
nft add rule ip filter input iifname "lo" counter accept
nft add rule ip filter input ip protocol icmp counter accept

nft 'chain ip filter input { policy drop ; }'

echo "flush ruleset" > /etc/nftables.conf
nft -s list ruleset >> /etc/nftables.conf

ip saddr *ip address* tcp dport 22 counter accept

 #ss tool

ss -t: show open TCP connections
ss -u: show open UDP connections
ss -a: show all sockets
ss -p: show all sockets by process

 #zabbix installation

https://www.zabbix.com/ru/download?zabbix=6.2&os_distribution=ubuntu&os_version=22.04&components=server_frontend_agent&db=mysql&ws=apache
apt install -y apache2 apt-transport-https certbot python3-certbot-apache mysql-server zabbix-server-mysql
apt zabbix-frontend-php zabbix-apache-conf zabbix-sql-scripts zabbix-agent
a2enmod rewrite
vim /etc/apache2/sites-available/zabbixhabr.local.conf

>>

<VirtualHost *:80>
	ServerAdmin mail@examle.com #тут укажите email администратора вэб сервера
	ServerName domenname.sample #тут укажите домен в моем случае это zabbihabr.local
	DocumentRoot /usr/share/zabbix
	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

--

a2ensite newsite.conf - enable new site
a2dissite 000-default.conf - disable old site
apache2ctl configtest - find erros (apache)

apt install mysql
mysql_secure_installation
mysql -u root -p

mysql console:

CREATE DATABASE $name of base$ CHARACTER SET utf8 COLLATE utf8_bin;
CREATE USER '*user_name*'@'localhost' IDENTIFIED BY $pass_user$;
GRANT ALL ON $name of base$.* TO '$user_name'@'localhost';
FLUSH PRIVILEGES;
quit;

zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql -u *user_name* -p *name_of_base*

vim /etc/zabbix/zabbix_server.conf >>

    DBHost=localhost

    DBName=*data_base*

    DBUser=*user_name*

    DBPassword=*user_pass*

--

vim /etc/zabbix/apache.conf - change region, if need it

systemctl restart zabbix-server zabbix-agent apache2
systemctl enable zabbix-server zabbix-agent apache2
ip.host/setup.php - install zabbix server


 #zabbix-tg-bot

https://github.com/ableev/Zabbix-in-Telegram
https://serveradmin.ru/nastroyka-opoveshheniy-zabbix-v-telegram/

 #zabbix-features

How to do trigger through tg-bot:

1.[ITEM] Configuration >> Hosts >> Items >> Create Items >> Choose Key (for example proc.num) >> Add it and check this in "Latest data monitor"
2.[TRIGGER] Configuration >> Hosts >> Triggers >> Create Trigger >> Add expression [Item] >> Add it
3.[ACTIONS] Configuration >> Action >> Trigger Actions >> Add new condition

DONE

--

 #mysql

apt install mysql-server
mysql_secure_installation


mysql for zabbix:


mysql -uroot -p

CREATE DATABASE zabbix CHARACTER SET utf8 COLLATE utf8_bin;
CREATE USER 'aquecola'@'localhost' IDENTIFIED BY 'pass';
GRANT ALL ON zabbix.* TO 'aquecola'@'localhost';
FLUSH PRIVILEGES;
zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql -u aquecola -p zabbix
vim /etc/zabbix/zabbix_server.conf - server config for zabbix-server


---

 #apache2

sudo a2enmod rewrite - turn on rewrite module

a2ensite - activate virtual host
a2dissite - deactivate virtual host
/etc/apache2/sites-available - virtual hosts

 #ansible

/etc/ansible/hosts

[linux]

0.0.0.0
0.0.0.0

[linux:vars]

ansible_user=root
ansible_password=root

ansible linux -m ping - using ansible
ansible linux -a "cat /etc/os-release"
ansible-playbook *yaml file*

 #bluetooth

apt install blueman
apt install wireplumber
apt install libspa-0.2-bluetooth
sudo systemctl restart bluetooth

 #wireguard

wg-quick up wg0
wg-quick down wg0

 #qemu

virsh list - show list of virt machines
virsh list --all - show list of virt machines even shut off

 #how to add new keyboard layouts

sudo vim /etc/locale.gen
locale-gen
sudo locale-gen

 #arch install

iwctl
device list
station wlan0 scan
station wlan0 get-networks
station wlan0 connect SSID

pacman -Syy
pacman -S archinstall
archinstall

sudo pacman -S base-devel git
git clone https://aur.archlinux.org/paru-bin.git
cd paru-bin
makepkg -sricCf
paru -Syu pamac-aur
q


 #journalctl

journalctl -e - open the last msg log

journalctl --vacuum-size=1G
journalctl --vacuum-time=1day
journalctl --vacuum-time=2weeks - clear msg log
journalctl -u docker - show docker log
journalctl -t dockerd - show docker log by tag
journalctl -p err -b -x - show error log
journalctl --since "1 hour ago"
journalctl --since "2 days ago"
journalctl --since "2022-06-26 23:15:00" --until "2022-06-26 23:20:00"


 #timeshift

examples:

timeshift --list
timeshift --delete --snapshot '2023-04-01_15-04-20'
timeshift --create --comments "after update"
timeshift --restore --snapshot '2014-10-12_16-29-08'
