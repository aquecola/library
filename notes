 #doc

 #windows

ssh-server:

dism /Online /Add-Capability /CapabilityName:OpenSSH.Server~~~~0.0.1.0 - install ssh-server

ssh-add "C:\Users\user\.ssh\id_ed25519" - add rsa key

C:\Programdata\ssh\sshd_config - main ssh config
DenyGroups Users
AllowGroups Administrators

| DenyUsers AllowUsers |

Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::Security>
Run choco install -y nano - install nano-win for Windows

https://ftp.nluug.nl/pub/vim/pc/gvim82.exe - download vim installer for windows

https://winitpro.ru/index.php/2015/09/02/neskolko-rdp-sessij-v-windows-10/ - how to create windows 10 into terminal server

how to add user through cmd/powershell:

net user "user_name" "password" /add
net localgroup Administrators admin /add

cmd help:

type - show
rd - delete directory
del - delete file
systeminfo
tasklist


 #linux

fdisk -l  #show all mounted disks
lsblk
 
ls -a
df -h  #check memory disc
df -i - check inodes
du - check memory directory
mount
LA(load average) == amount of cores - OK
dhclient  -r - get new ip from DHCP
cat /var/log/boot.log - bootlog info
stat -c "%a %n" go - show permission numeric

usefull tools and commands:

pstree - show all demons
sudo service restart
sudo systemctl restart
free -m - check free ram
htop - nice tool for monitoring sys, like 'windows' task manager
uname -a - show linux version
wget https://git.io/vpn -O openvpn-install.sh - the fastest way for install openVPN-server through the script

&> /dev/null &

/etc/environment, /etc/profile - $PATH file

how to use ssh key: (v2)

ssh-keygen - generate ssh key
ssh-copy-id *server* - copy your ssh id on server
cat ~/.ssh/id_rsa.pub | ssh имя_пользователя@адрес_сервера "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod go= ~/.ssh/authorized_keys" - manual add key

how to generate ssh key: 

ssh-keygen -t ed25519 -C "your_email@example.com"
eval "$(ssh-agent -s)" - show existing ssh keys
ssh-add ~/.ssh/id_ed25519 - add ssh private key to the ssh-agent

all about repositories:

apt-cache policy | grep http | awk '{print $2 $3}' | sort -u - show all ppa repositories
sudo add-apt-repository $$ ppa: $$ - add repository
/etc/apt/sources.list - all installed repositories

 #yum

yum repolist all - list of enabled and disabled yum repositories
yum clean all - clear cache

firewall allow port:

sudo ufw enable
sudo ufw allow 1716:1764/tcp
sudo ufw allow 1716:1764/udp

 #linux_and_apps_problems

Failed to start LSB: VirtualBox Linux kernel module
solution:
disable secure boot in bios

 #git

Конфигурация находится в директории "Home" на Linux, называется .gitconfig
git init - добавить репозиторий
git status - проверить состояние репозитория
git add -A - добавить трекер на всю директорию

git commit -m 'Add some code'
git commit --amend - поменять текст последнего коммита

git remote add origin "ссылка на репозиторий" - подключение к удалённому репозиторию

git push origin master - отправка локальных изменений на сервер
git fetch - вытаскивание данных с сервера на локальный клиент
git pull - как я понял, делает тоже самое, что и fetch

git branch - создание новой ветки/просмотр веток
git branch -d - удаление ветки
git checkout - переключение на другую ветку
git merge 'название ветки' - объединение действующей с другой веткой

git config pull.rebase false  # merge (the default strategy)
git config pull.rebase true   # rebase
git config pull.ff only       # fast-forward only 

git config --edit
git config --global --edit

git submodule add git@github.com:aquecola/docker_prometheus_stack.git Docker/docker_prometheus_stack # create submodule


 #---#


 #powershell

Set-Service -Name sshd -StartupType 'Automatic'

 #docker 

installation:

apt install docker docker.io


commom commands:

docker pull - download image
docker images - cheking existing images 
docker run - start container
docker ps - show all working containers rn
docker ps -a - show all containers when started in a past
docker rm - delete container
docker ps -a -f status=exited
docker system df - check docker df

docker exec -it busybox sh - starting shell of current container 
docker run -d -P --name static-site prakhar1989/static-site - starting web site where -d - detached mode, -P - makes open ports public
docker run -p 8888:80 'name' - run image on port 8888:80

sudo mkdir -p /etc/apt/keyrings

docker inspect --format='{{index .Config.Image}}' <container_id> #docker #inspect sha hash of container
docker images --digests #docker #show images with sha hash
docker tag ced98ed9e5fb11a85e3ebf43de0740163e0cc65fb5220972fbfa50d3c0dc6dce registry/link/app:0.0.171-master #docker #add tag to image
docker push registry/link/app:0.0.171 #docker #push into registry by tag


--


 #docker-swarm

docker swarm init --advertise-addr # docker-swarm
docker swarm join-token manager #docker-swarm
docker swarm join-token worker #docker-swarm
docker swarm join --token #docker-swarm
docker swarm leave #docker-swarm
docker swarm init #docker-swarm
docker stack deploy -c /Docker/common/services/whitelables/123.yml --with-registry-auth whitelables #docker-swarm
docker stack services whitelables #docker-swarm
docker stack ls #docker-swarm
docker node ls #docker-swarm
docker node update --availability drain 'node' #docker-swarm #cleaning node
docker node update --availability active 'node' #docker-swarm #turn on the node
docker service scale my_service=1 #docker-swarm #replica
docker service update --image 'path_to_registry' 'name_of_service' #docker-swarm #service update

 #kubernetes #kubectl

kubectl get nodes
kubectl get pods --all-namespaces

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.4/deploy/static/provider/cloud/deploy.yaml #install ingress nginx
kubectl patch svc ingress-nginx-controller -p '{"spec":{"externalIPs":["192.168.4.70"]}}' #install ingress nginx

kubectl get configmaps -n ingress-nginx #install ingress #get configmaps
kubectl edit configmap ingress-nginx-controller -n ingress-nginx #install ingress #edit config-maps

export KUBE_EDITOR=vim #kubectl #change default editor for kubectl

kubectl create secret generic registry-cred     --from-file=.dockerconfigjson=.docker/config.json     --type=kubernetes.io/dockerconfigjson --namespace _name_ #kubectl #create secret for reg
kubectl create secret tls example.group --key example.group.key --cert fullchain.cer


 #join k8s master to cluster

kubeadm token create --print-join-command #kubernetes #kubectl
kubeadm init phase upload-certs --upload-certs #kubernetes #kubectl

kubeadm join k8s.devteam.local:6443 --token 8fb1xo.ipn06cosq37lepop --discovery-token-ca-cert-hash sha256:f6cb81e7a94c4a95fed61319b888f62e7864e23999fb3946e5d7de3b91431dab  --control-plane --certificate-key 38de16b8a5d909af8399736cb1ab08c82376d0b7cf1b51811c9c38f41653b3a4 #kubectl #kubernetes

 #jenkins

installation:

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
sudo ufw allow 8080 - to open the port
sudo ufw allow OpenSSH
sudo ufw enable - to enable firewall if it is innactive
sudo ufw status

how to change HTTP port:

vim /etc/default/jenkins (for Debian/Ubuntu)
vim /etc/sysconfig/jenkins (for CentOS)

 #nginx

sudo nginx -t - check configuration files

 #vagrant

vagrant init *author/box - add vagrant configuration and create new evironment, discover vagrant boxes here - https://app.vagrantup.com/boxes/search
vagrant up - start virtual machine
vagrant halt - stop virtual machine
vagrant ssh - connects to machine via ssh
vagrant ssh-config - outputs OpenSSH valid configuration to connect to machine

config example for vagrant virtual machine:

Vagrant.configure(2) do |config|
config.vm.box = "bento/ubuntu-18.04"
config.vm.box_check_update = false
config.vm.provider "virtualbox" do |vb|
vb.name = "ubuntu-1804-test"
vb.memory = 2048
vb.cpus = 1
  end
  
config.vm.hostname = "ubuntu-1804-test"
config.vm.network "public_network"
config.ssh.username = "vagrant"
config.ssh.password = "vagrant"

end
!!!

 #nmcli

nmcli con add type tun/eth/etc ifname *interface*
nmcli con mod *name* ipv4.address 0.0.0.0/0
nmcli con mod *name* ipv4.method manual/auto (no dhcp, dhcp)
nmcli con mod *name* ipv4.routes 0.0.0.0/0 (dst)
nmcli dev wifi connect Hackernet password localhost22
nmcli dev wifi list

 #nmap

nmap -sP 192.168.3.0/24 - describe and show all available hosts in network
nmap -sT 192.168.3.2 - show all open ports

 #ufw

ufw allow 1716:1764/tcp
ufw allow 1716:1764/udp - open port
vim /etc/default/ufw - config for ufw
ufw allow from 79.137.196.193 to any port 22
ufw allow from 176.53.193.30 to any port 22
ufw allow in on eth0 to any port 80
ufw status numbered

 #firewalld (CentOS/Fedor)

firewall-cmd --permanent --zone=public --add-port=22/tcp
firewall-cmd --list-all
firewall-cmd --zone=public --add-source 0.0.0.0 --permanent
firewall-cmd --zone=public --add-forward-port=port=2223:proto=tcp:toport=22 - port forwarding
firewall-cmd --zone=public --add-masquerade
firewall-cmd --zone=publiс --add-forward-port=port=2223:proto=tcp:toport=22:toaddr=192.168.56.4 - port forwarding to another machine 

 #iptables

yum install iptables-services

basic iptables configuration:



iptables -nvL --line-numbers - show all rules
iptables -A INPUT -p tcp --dport=22 -d *dest ip address* -j ACCEPT
iptables -I INPUT -p tcp -m state --state NEW -s *source address* --dport=22 -j ACCEPT
iptables -t filter -D INPUT 6 - delete rule in filter
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -P INPUT DROP

service iptables save - #save rules


 #nf_tables

iptables-translate #


nft list table ip filter 
nft flush ruleset
nft add table ip filter 
nft 'add chain ip filter input { type filter hook input priority 0 ; }'
nft add rule ip filter input tcp dport 22 counter accept
nft add rule ip filter input tcp dport {80, 443} counter accept
nft add rule ip filter input ct state related, established counter accept
nft add rule ip filter input iifname "lo" counter accept
nft add rule ip filter input ip protocol icmp counter accept

nft 'chain ip filter input { policy drop ; }'

echo "flush ruleset" > /etc/nftables.conf
nft -s list ruleset >> /etc/nftables.conf

ip saddr *ip address* tcp dport 22 counter accept

 #ss tool

ss -t: show open TCP connections
ss -u: show open UDP connections
ss -a: show all sockets
ss -p: show all sockets by process

 #tcpdump tool

tcpdump -i <interface> tcp - show only TCP-packets
tcpdump -i <interface> -n tcp - show only TCP-packets no DNS
tcpdump -i <interface> -n tcp host 192.168.1.1 - show TCP-packets from IP

examples:

tcpdump -i ens3 -n udp port 51820

 #apache2

sudo a2enmod rewrite - turn on rewrite module

a2ensite - activate virtual host
a2dissite - deactivate virtual host
/etc/apache2/sites-available - virtual hosts

 #ansible

ansible test -m ping #ansible
ansible test -m command -a uptime #ansible
ansible test -a uptime #ansible
ansible test -m command -a "cat /proc/cpuinfo" --become --become-user=root --ask-become-pass #ansible
ansible-inventory --list  #ansible
ansible-inventory --graph #ansible

 #bluetooth

apt install blueman
apt install wireplumber
apt install libspa-0.2-bluetooth
sudo systemctl restart bluetooth

 #wireguard

wg-quick up wg0 #wireguard
wg-quick down wg0 #wireguard
docker exec -it wireguard /app/show-peer 2 #wireguard
systemctl status wg-quick@wg1.service #wireguard

 #qemu

virsh list - show list of virt machines #qemu
virsh list --all - show list of virt machines even shut off #qemu

 #how to add new keyboard layouts arch

sudo vim /etc/locale.gen #keyboard
locale-gen #keyboard
sudo locale-gen #keyboard

 #arch install

iwctl #arch install
device list #arch install
station wlan0 scan #arch install
station wlan0 get-networks #arch install
station wlan0 connect SSID #arch install

pacman -Syy #archinstall
pacman -S archinstall #archinstall
archinstall #archinstall

sudo pacman -S base-devel git #archinstall
git clone https://aur.archlinux.org/paru-bin.git #archinstall
cd paru-bin #archinstall
makepkg -sricCf #archinstall
paru -Syu pamac-aur #archinstall
q #archinstall


 #journalctl

journalctl -e - open the last msg log

journalctl --vacuum-size=1G
journalctl --vacuum-time=1day
journalctl --vacuum-time=2weeks - clear msg log
journalctl -u docker - show docker log
journalctl -t dockerd - show docker log by tag
journalctl -p err -b -x - show error log
journalctl --since "1 hour ago"
journalctl --since "2 days ago"
journalctl --since "2022-06-26 23:15:00" --until "2022-06-26 23:20:00"


 #timeshift

examples:

timeshift --list
timeshift --delete --snapshot '2023-04-01_15-04-20'
timeshift --create --comments "after update"
timeshift --restore --snapshot '2014-10-12_16-29-08'
timeshift --snapshot-device /dev/nvme0n1p2 --list

 #mysql

 #sway

swaymsg -t get_tree

 #openvpn

sudo openvpn --config /path/to/your/config.ovpn

 #groups

groupadd docker #groups
usermod -aG docker $USER #groups

 #storage

du -sh /diri #storage
du -hd 1 / #storage

 #getty@tty1.service

systemctl stop getty@tty[tty_number].service #getty

 #grub-menu

press "e", type emergency #grub-menu-arch #systemd can't start some reason

 #curl features

cat text.txt | curl -F 'f:1=<-' ix.io #curl features #upload text file
curl "qrenco.de/test" #curl features #generate qr-code
curl wttr.in #curl features #weather by ip
curl cheat.sh/docker #curl features #good cheat.doc
curl -F'file=@kurwa legacy.mp4' https://0x0.st #curl features #upload file 512mb
curl -O https://0x0.st/HNJe..mp4 #curl features #download file
curl -v telnet://127.0.0.1:22 #curl features #check port if telnet unavailiable

 #partision

lsblk #partision
sudo fdisk /dev/sdXY #partision
n
mkfs.ext4 /dev/sdXY #partision
mount /dev/sdXY #partision

 #partision #add logical volumes

fdisk /dev/sdX #partision #add logical volumes
pvcreate /dev/sdXn #partision #add logical volumes #create lvm volume
vgcreate myvg /dev/sdXn #partision #add logical volumes #create lvm group
lvcreate -L 80G -n mylv myvg #partision #add logical volumes #create lvm partision in group, where 'mylv' - partision, myvg - group
mkfs.ext4 /dev/myvg/mylv #partision #add logical volumes #format logical volume
mount /dev/myvg/mylv /mnt/mylv #partision #add logical volumes #mount
echo "/dev/myvg/mylv /mnt/mylv ext4 defaults 0 0" | sudo tee -a /etc/fstab #partision #add logical volumes #add auto-mount fstab
vgdisplay #partision #show logical volumes
lvdisplay #partision #show logical volumes

pvresize /dev/sdb #partision #expand_lvm
lvextend -L +400G /dev/harbor/harbor #partision #expand_lvm
resize2fs /dev/harbor/harbor #partision #expand_lvm

 #virtual-virsh

virt-install --name myvm --ram 2048 --vcpus 2 --disk size=20 --cdrom /path/to/iso-file.iso #virtual-virsh
virsh list --all #virtual-virsh
virsh start myvm #virtual-virsh
virsh shutdown myvm #virtual-virsh
virsh destroy myvm #virtual-virsh
virsh setmem myvm 4G --config --live --- change config memory #virtual-virsh
virsh console myvm --- connect via ssh #virtual-virsh

 #winrm config for ansible

set-executionpolicy -executionpolicy remotesigned #winrm #ansible
winrm quickconfig -q #winrm #ansible
winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="512"}' #winrm #ansible
winrm set winrm/config '@{MaxTimeoutms="1800000"}' #winrm #ansible
winrm set winrm/config/service '@{AllowUnencrypted="true"}' #winrm #ansible
winrm set winrm/config/service/auth '@{Basic="true"}' #winrm #ansible

 #btrfs swap

btrfs filesystem mkswapfile --size 2G swapfile #btrfs
swapon swapfile #btrfs

 #mongodb

docker exec -it container_name /bin/bash # when db in docker #mongodb 

mongo #mongodb
show dbs #mongodb 
use $db_string #mongodb 
show collections #mongodb 
exit #mongodb 

mongodump --db your_database_name --collection collection #mongodb
mongorestore --db your_database_name /path/to/dump # if need it #mongodb


docker cp container_name:/dump /path/to/host/directory #mongodb

 #ssl

openssl s_client -connect example.com:443 #ssl

 #cpulimit

cpulimit -l 10 -p 555

 #OM-killer

vim /etc/sysctl.conf #OM-killer

vm.overcommit_memory = 2 #OM-killer
vm.overcommit_ratio = 50 #OM-killer
sysctl -p #OM-killer

 #how to remap keys

/usr/share/X11/xkb/keycodes/evdev - change keys #how to remap keys

 #proxmox

/etc/pve/corosync.conf #proxmox #nodes config
pvecm expected 1 #proxmox #set qorum
pvecm status #proxmox
pvecm pvecm delnode host #proxmox


gdisk -l /dev/zvol/rpool/data/vm-143-disk-0 #proxmox #fix bootable disk
gdisk /dev/zvol/rpool/data/vm-143-disk-0 #proxmox #fix bootable disk
w #proxmox #fix bootable disk

vzdump 105 --dumpdir /root --mode stop #proxmox #proxmox-export-vm #make vm dump for exporting
scp /root/vzdump-qemu-105-2021_12_10-16_47_51.vma root@192.168.99.8:/root #proxmox #proxmox-export-vm #export dump
qmrestore /root/vzdump-qemu-105-2021_12_10-16_47_51.vma 105 -storage local-lvm #proxmox #proxmox-export-vm #restore dump

qm importdisk 110 disk.vhdx local-lvm --format raw #proxmox #import
qm importdisk 106 disk.vmdk local-lvm --format raw #proxmox #import

qm unlock <vmid> #proxmox #unlock vm

 #check i/o disk #checkio

dd if=/dev/zero of=/tmp/testfile bs=1M count=1000 conv=fdatasync #checkio

 #stress-test-cpu

stress --cpu 4 --io 2 --vm 1 --vm-bytes 128M --timeout 10s #stress-test-cpu

 #stress-test-network

iperf -s #stress-test #stress-test-network #for server LSTN
iperf -c #stress-test #stress-test-network #for client

 #stress-test-disks

vim disk_stress_test.fio #stress-test-disks

>

[global]
ioengine=posixaio
runtime=1h
time_based

[disk_test]
size=10G
blocksize=4k
rw=randwrite
numjobs=8

>

fio disk_stress_test.fio #stress-test-disks

 #ip_tool

ip neigh show #ip_tool #show arp table
ip neigh flush all #ip_tool #flush arp table
ip neigh delete 192.168.1.1 dev eth0 #ip_tool #delete arp-record
ip neigh add 192.168.1.1 lladdr 00:11:22:33:44:55 nud permanent dev eth0 #ip_tool #add arp-record

ip route add <destination_network> via <gateway_address> dev <network_interface> #ip_tool #add-route-to-host
vim /etc/systemd/network/static_route.network #ip_tool #make route available after reboot

>

[Network]
Destination=192.168.2.0/24
Gateway=192.168.1.1

>

 #strace

strace -fe open,openat,close,read,write,ioctl date #strace #tracing data by system calls

 #mount features

mount -t cifs //192.168.4.119/f$ ~/smb-192.168.4.119/ -o username=admin,password=******** #mount features #cifs #smb
//192.168.5.99/e$/Shares/Buh/ /mnt/smb-buh cifs uid=50000,gid=50000,rw,credentials=/etc/.smbclient 0 0 #mount features #cifs #smb #/etc/fstab

 #boot_fix

How to access the Debian Guest VM? #boot_fix
1. Enter exit get out of the UEFI Shell (you will come to BHYVE panel) #boot_fix
2. Choose Boot Maintenance Manager #boot_fix
3. (In the Boot Maintenace Manager ) Choose Boot From File #boot_fix
4. (In File Explorer) NO VOLUME LABEL, [PciRoot(0x0)/ Pci()]  press Enter #boot_fix
5. (Still in the File Explorer) Choose <EFI> #boot_fix
6. (Still in the File Explorer) Choose debian #boot_fix
7. (Still in the File Explorer) Choose grubx64.efi #boot_fix
8. Then you will get into the system #boot_fix

How can you fix it: #boot_fix
1) Get access inside your Debian Guest VM. #boot_fix
2) as root: cd /boot/efi/ #boot_fix
3) mkdir -p EFI/BOOT #boot_fix
4) cp debian/grubx64.efi EFI/BOOT/bootx64.efi #boot_fix
5) reboot #boot_fix

Basically you need to have this file in this path: #boot_fix
/boot/efi/EFI/BOOT/bootx64.efi #boot_fix

 #udev_monitoring

udevadm monitor -k #udev_monitoring

 #create_lxc_container_debian

lxc-create --name=debian12 --template=download -- --dist debian --arch amd64 #create_lxc_container_debian
configure /var/lib/lxc config, edit network section #create_lxc_container_debian
lxc-start debian12 #create_lxc_container_debian
lxc-ls #create_lxc_container_debian
lxc-attach debiab12 #create_lxc_container_debian
lxc-info -n deb-12 #create_lxc_container_debian

 #nslookup_tool

nslookup -type=mx example.com

 #dig

dig @8.8.8.8 example.com #dig #describe dns from 8.8.8.8 host
dig -t mx example.com #dig #describe dns mx records

 #namespaces

lsns #namespaces #describe namespaces
lsns -t net #namespaces #describe namespaces by type

 #ssh-feature

ssh -L localhost:9998:192.168.50.24:443 nginx11 #ssh-feature #ssh-proxy

 #python features

python3 -m venv .venv --prompt A #python features
source .venv/bin/activate #python features

 #jq features

[                    #jq
  {                  #jq
    "name": "Alice", #jq
    "age": 30        #jq
  },                 #jq
  {                  #jq
    "name": "Bob",   #jq
    "age": 25        #jq
  }                  #jq
]                    #jq
                     #jq
                     
cat data.json | jq '.[].name' #jq filtering
